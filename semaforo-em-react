import React, { useState, useEffect, useRef } from 'react';

// Objeto com as classes do Tailwind para cada cor
const cores = {
  vermelho: {
    background: 'bg-red-600',
    border: 'border-red-700',
    shadow: 'shadow-red-500',
  },
  amarelo: {
    background: 'bg-yellow-400',
    border: 'border-yellow-500',
    shadow: 'shadow-yellow-400',
  },
  verde: {
    background: 'bg-green-500',
    border: 'border-green-600',
    shadow: 'shadow-green-500',
  },
};

const SemaforoInterativo = () => {
  const [luzAtual, setLuzAtual] = useState('vermelho');
  const [modoAutomatico, setModoAutomatico] = useState(false);
  const [contador, setContador] = useState(10);
  const intervalRef = useRef(null);

  // Função para alternar a luz manualmente
  const alternarLuz = () => {
    if (luzAtual === 'vermelho') {
      setLuzAtual('verde');
    } else if (luzAtual === 'verde') {
      setLuzAtual('amarelo');
    } else {
      setLuzAtual('vermelho');
    }
  };

  // Alterna o modo automático
  const alternarModoAutomatico = () => {
    setModoAutomatico((prev) => !prev);
  };

  // useEffect para gerenciar o contador e a troca automática da luz
  useEffect(() => {
    if (modoAutomatico) {
      // Reinicia o contador sempre que o modo automático for ativado ou a luz mudar
      setContador(10);
      intervalRef.current = setInterval(() => {
        setContador((prev) => {
          if (prev <= 1) {
            // Quando o contador chega a 0, muda a luz e reinicia o contador
            alternarLuz();
            return 10;
          }
          return prev - 1;
        });
      }, 1000);
    } else {
      clearInterval(intervalRef.current);
    }
    // Limpa o intervalo ao desmontar ou quando o modo mudar
    return () => clearInterval(intervalRef.current);
  }, [modoAutomatico, luzAtual]);

  return (
    <div className="flex flex-col items-center justify-center p-8 bg-gray-100 min-h-screen">
      <h1 className="text-3xl font-bold mb-8">Semáforo Interativo</h1>

      {/* Corpo do semáforo */}
      <div className="bg-gray-800 p-6 rounded-xl shadow-lg flex flex-col items-center relative">
        {/* Suporte superior */}
        <div className="w-6 h-12 bg-gray-700 -mt-12 rounded-t-lg"></div>

        {/* Luzes do semáforo */}
        <div className="flex flex-col gap-6 p-4">
          <div
            className={`w-32 h-32 rounded-full ${cores.vermelho.background} ${cores.vermelho.border} border-4 flex items-center justify-center shadow-lg ${cores.vermelho.shadow}`}
          >
            {luzAtual === 'vermelho' && modoAutomatico && (
              <span className="text-white font-bold text-2xl">{contador}</span>
            )}
          </div>
          <div
            className={`w-32 h-32 rounded-full ${cores.amarelo.background} ${cores.amarelo.border} border-4 flex items-center justify-center shadow-lg ${cores.amarelo.shadow}`}
          >
            {luzAtual === 'amarelo' && modoAutomatico && (
              <span className="text-white font-bold text-2xl">{contador}</span>
            )}
          </div>
          <div
            className={`w-32 h-32 rounded-full ${cores.verde.background} ${cores.verde.border} border-4 flex items-center justify-center shadow-lg ${cores.verde.shadow}`}
          >
            {luzAtual === 'verde' && modoAutomatico && (
              <span className="text-white font-bold text-2xl">{contador}</span>
            )}
          </div>
        </div>

        {/* Suporte inferior */}
        <div className="w-12 h-32 bg-gray-700 mt-6 rounded-b-lg"></div>
      </div>

      {/* Controles */}
      <div className="mt-12 flex flex-col gap-4 items-center">
        <div className="flex gap-4">
          <button
            onClick={alternarLuz}
            disabled={modoAutomatico}
            className={`px-6 py-3 rounded-lg bg-blue-500 text-white font-semibold shadow-md hover:bg-blue-600 ${modoAutomatico ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            Mudar Luz
          </button>
          <button
            onClick={alternarModoAutomatico}
            className={`px-6 py-3 rounded-lg ${modoAutomatico ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'} text-white font-semibold shadow-md`}
          >
            {modoAutomatico ? 'Desativar Automático' : 'Ativar Automático'}
          </button>
        </div>

        <div className="mt-4 bg-white p-4 rounded-lg shadow-md">
          <h3 className="font-bold text-lg mb-2">Status do Semáforo:</h3>
          <p className="mb-1">
            Luz atual: <span className="font-semibold capitalize">{luzAtual}</span>
          </p>
          <p className="mb-1">
            Modo:{' '}
            <span className="font-semibold">
              {modoAutomatico ? 'Automático' : 'Manual'}
            </span>
          </p>
          {modoAutomatico && (
            <p>
              Próxima mudança em:{' '}
              <span className="font-semibold">{contador} segundos</span>
            </p>
          )}
          <div className="mt-4">
            <p className="text-sm text-gray-600">Significado das cores:</p>
            <ul className="text-sm text-gray-700 mt-1">
              <li>
                •{' '}
                <span className="text-red-600 font-semibold">Vermelho</span>: Pare! Aguarde.
              </li>
              <li>
                •{' '}
                <span className="text-yellow-600 font-semibold">Amarelo</span>: Atenção! Preparar.
              </li>
              <li>
                •{' '}
                <span className="text-green-600 font-semibold">Verde</span>: Siga! Pode ir.
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SemaforoInterativo;
